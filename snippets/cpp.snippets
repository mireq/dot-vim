# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}

# std::map
snippet map
	std::map<${1:key}, ${2:value}> ${3};

# std::vector
snippet vector
	std::vector<${1:char}> ${2};

# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* namespace $1 */

# Class
snippet class
	class ${1:`Filename('$1', 'name')`}
	{
	public:
		$1(${2});
		~$1();

	private:
		${3:/* data */}
	};

# QObject
snippet QObject QObject
	class ${1:`Filename('$1', 'class')`}: public ${2:QObject}
	{
	Q_OBJECT
	public:
		$1(${3}QObject *parent = 0);
		~$1();
	private:
	}; /* -----  end of class $1  ----- */
# QWidget
snippet QWidget QWidget
	class ${1:`Filename('$1', 'class')`}: public ${2:QWidget}
	{
	Q_OBJECT
	public:
		$1(${3}QWidget *parent = 0);
		~$1();
	private:
	}; /* -----  end of class $1  ----- */
# uiDecl
snippet uiDec Ui Declaration
	#include <QtGui/$2>

	namespace Ui {
		class ${1:`Filename('$1', 'class')`};
	}

	class $1: public ${2:QWidget}
	{
	Q_OBJECT
	public:
		$1(${3}QWidget *parent = 0);
		~$1();
	private:
		Ui::$1 *ui;
	}; /* -----  end of class $1  ----- */

snippet uiDef Ui Definition
	#include "${1:`Filename('$1', 'class')`}.h"
	#include "ui_$1.h"

	$1::$1(QWidget *parent):
		${2:QWidget}(parent),
		ui(new Ui::$1)
	{
		ui->setupUi(this);
	}

	$1::~$1()
	{
		delete ui;
	}

snippet langChange Change language event
	void ${1:`Filename('$1', 'class')`}::changeEvent(QEvent *event)
	{
		${2:QWidget}::changeEvent(event);
		switch (event->type()) {
			case QEvent::LanguageChange:
				ui->retranslateUi(this);
				break;
			default:
				break;
		}
	}
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}

# auto iterator
snippet itera
	for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
		${2:std::cout << *$1 << std::endl;}
	}

# iterator
snippet iter
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

# member function implementations
snippet mfun
	${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${5:return};
	}
snippet scout
	std::cout << ${1} << std::endl;
snippet cout
	cout << ${1} << endl;
snippet scin
	std::cin >> ${1};
snippet cin
	cin >> ${1};
snippet meth
	${2:void} ${1:`Filename('$1', 'class')`}::${3:method}(${4})${5}
	{
		${6}
	}
# Const method
snippet methc
	${2:void} ${1:`Filename('$1', 'class')`}::${3:method}(${4}) const
	{
		${5}
	}
# Property
snippet prop
	${2:int} ${1:`Filename('$1', 'class')`}::${3:property}() const
	{
		return m_$3;
	}
	
	
	void $1::set${4:$3}(const $2 &$3)
	{
		m_$3 = $3;
	}

snippet forit
	for (${3:auto} ${1:it} = ${2:list.}begin(); $1 != $2end(); ++$1) {
		${4}
	}

snippet /*
	/**
	 * ${1}
	 */
